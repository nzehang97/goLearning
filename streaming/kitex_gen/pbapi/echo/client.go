// Code generated by Kitex v1.4.2. DO NOT EDIT.

package echo

import (
	"context"

	"github.com/cloudwego/examples/streaming/kitex_gen/pbapi"

	"github.com/cloudwego/kitex/client"
	"github.com/cloudwego/kitex/client/callopt"
	"github.com/cloudwego/kitex/pkg/streaming"
	"github.com/cloudwego/kitex/transport"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	StreamRequestEcho(ctx context.Context, callOptions ...callopt.Option) (stream Echo_StreamRequestEchoClient, err error)
	StreamResponseEcho(ctx context.Context, Req *pbapi.Request, callOptions ...callopt.Option) (stream Echo_StreamResponseEchoClient, err error)
	BidirectionalEcho(ctx context.Context, callOptions ...callopt.Option) (stream Echo_BidirectionalEchoClient, err error)
}

type Echo_StreamRequestEchoClient interface {
	streaming.Stream
	Send(*pbapi.Request) error
	CloseAndRecv() (*pbapi.Response, error)
}

type Echo_StreamResponseEchoClient interface {
	streaming.Stream
	Recv() (*pbapi.Response, error)
}

type Echo_BidirectionalEchoClient interface {
	streaming.Stream
	Send(*pbapi.Request) error
	Recv() (*pbapi.Response, error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(psm string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(psm))
	options = append(options, client.WithTransportProtocol(transport.GRPC))
	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfo(), options...)
	if err != nil {
		return nil, err
	}
	return &kEchoClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(psm string, opts ...client.Option) Client {
	kc, err := NewClient(psm, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kEchoClient struct {
	*kClient
}

func (p *kEchoClient) StreamRequestEcho(ctx context.Context, callOptions ...callopt.Option) (stream Echo_StreamRequestEchoClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StreamRequestEcho(ctx)
}

func (p *kEchoClient) StreamResponseEcho(ctx context.Context, Req *pbapi.Request, callOptions ...callopt.Option) (stream Echo_StreamResponseEchoClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.StreamResponseEcho(ctx, Req)
}

func (p *kEchoClient) BidirectionalEcho(ctx context.Context, callOptions ...callopt.Option) (stream Echo_BidirectionalEchoClient, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.BidirectionalEcho(ctx)
}
